
;; indicators




; ratio of sucessful communication
to-report intelligibility-rate
  report (count speakers with [happy? = true]) / count speakers
end


; language size
to-report language-size
  report count spoken-words
end


; diversity linear trend (linear OLS)
to-report diversity-linear-trend
  ; needs to memorize diversity in time
  let reg matrix:regress matrix:from-column-list (list diversities (seq 1 length diversities 1))
  report item 1 (item 0 reg)
end

to-report abs-trend
  report abs diversity-linear-trend
end



; language diversity
to-report language-diversity
  
  ;; first attempt : \sum_sem d(w,sem)
  let res 0
  
  if semantic-mapping = 0 [report 0]
  
  foreach table:keys semantic-mapping [
    let w1 one-of spoken-words with [word-text = first ? and [word-text] of semantic = last ?]
    let w2 one-of spoken-words with [word-text = last ? and [word-text] of semantic = last ?]
    if w1 = nobody or w2 = nobody [show ? show table:get semantic-mapping ? let x user-yes-or-no? "bug : word does not exist anymore"]
    set res res + word-distance w1 w2
  ]
  
  report res
end



to update-indicators
  set diversities lput language-diversity diversities
end



; proper print
to show-vocabulary
  let semvals table:make
  
  foreach table:keys semantic-mapping [
     ifelse table:has-key? semvals table:get semantic-mapping ? [
         table:put semvals table:get semantic-mapping ? (lput first ? (table:get semvals (table:get semantic-mapping ?)))
       ][
         table:put semvals table:get semantic-mapping ? (list first ?)
     ]
  ]
  
  foreach table:keys semvals [
    let p (word ? " <- ")
    foreach table:get semvals ? [set p (word p " - " ?)]
    output-print p
  ]
  
end


;;
;
to-report vocabulary-distance [speaker1 speaker2]
  let res 0
  foreach semantics [
    set res res + word-distance (one-of (to-agentset [vocabulary] of speaker1) with [semantic = ?]) (one-of (to-agentset [vocabulary] of speaker2) with [semantic = ?]) ; dirty
  ]
  report res
end

;;
; report adjacency list with (agent1id,agent2id,distance)
to-report overall-voc-distances
  let res []
  let speaker-list to-list speakers
  let i 0 repeat (length speaker-list - 1)[
    let j (i + 1)
    repeat (length speaker-list - i - 1)[
      let s1 item i speaker-list let s2 item j speaker-list
      set res lput (list [who] of s1 [who] of s2 vocabulary-distance s1 s2) res
      set j j + 1 
    ]
    set i i + 1 
  ]
  report res
end



to dump-voc-network
  lists-csv-export overall-voc-distances (list "a1" "a2" "weight") ";" (word "res/vocabulary_nw_" date-and-time ".csv")
end

;to measure-ind-dist
;  foreach to-list speakers
;    let s1 ?
;    let v1 [ask s1 vocabulary] ; speaker 1 vocabulary
;      foreach to-list speakers
;      [let v2 [ask ? vocabulary] ; speaker 2 vocabulary
;        output-print item v1 v2   
;    ]
;  ]
;end
    