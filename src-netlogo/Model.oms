
// variables
// sem-size pop-size voc-var #-mutations understanding time-steps
val semanticSize = Val[Double]
val populationSize = Val[Double]
val initVariability = Val[Double]
val mutationRate = Val[Double]
val understandingThreshold = Val[Double]

// indicators
// intelligibility-rate language-size diversity-linear-trend language-diversity
val intellibility = Val[Double]
val languageSize = Val[Double]
val diversityTrend = Val[Double]
val languageDiversity = Val[Double]

val id = Val[Int]
val replication = Val[Int]

// setup-experiment [sem-size pop-size voc-var #-mutations understanding time-steps]
val cmds = Seq("setup-experiment ${semanticSize} ${populationSize} ${initVariability} ${mutationRate} ${understandingThreshold} 10000","go-experiment")

val model =
//NetLogo5Task.workspace("HEADLESS_circeco.nlogo",cmds,replication)set(//embedWorkspace=true) set (
NetLogo5Task.workspace(workDirectory,"HEADLESS_language.nlogo",cmds) set(
    inputs += (semanticSize,populationSize,initVariability,mutationRate,understandingThreshold,id),
    outputs += (semanticSize,populationSize,initVariability,mutationRate,understandingThreshold,id),
    netLogoOutputs += ("intelligibility-rate", intellibility),
    netLogoOutputs += ("language-size", languageSize),
    netLogoOutputs += ("diversity-linear-trend", diversityTrend),
    netLogoOutputs += ("language-diversity", languageDiversity),
)
  
  