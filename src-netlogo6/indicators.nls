
;; indicators






;;
; memorize indic values in time
to update-indicators
  set diversities lput language-diversity diversities
  set inteligs lput intelligibility-rate inteligs
  
  if plot-modularity? and ticks mod 100 = 1 [
    ;set current-modularity max-network-modularity
    update-speaker-network-weights
    set current-modularity network-modularities seq 0.5 0.9 0.1
  ]
end




; ratio of sucessful communication
to-report intelligibility-rate
  report (count speakers with [happy? = true]) / count speakers
end

; smoothed
to-report smoothed-intelligibility-rate
  if length inteligs <= smoothing-window-size [report mean inteligs]
  report mean sublist inteligs (length inteligs - smoothing-window-size) (length inteligs)
end





; language size
to-report language-size
  report count spoken-words
end





; language diversity
to-report language-diversity
  
  ;; first attempt : \sum_sem d(w,sem)
  let res 0
  
  if semantic-mapping = 0 [report 0]
  
  foreach table:keys semantic-mapping [
    [s]->
    let w1 one-of spoken-words with [word-text = first s and [word-text] of semantic = last s]
    let w2 one-of spoken-words with [word-text = last s and [word-text] of semantic = last s]
    if w1 = nobody or w2 = nobody [show s show table:get semantic-mapping s let x user-yes-or-no? "bug : word does not exist anymore"]
    set res res + word-distance w1 w2
  ]
  
  report res / (count speakers * length semantics)
end


;;
;
to-report smoothed-diversity
  if length diversities <= smoothing-window-size [report mean diversities]
  report mean sublist diversities (length diversities - smoothing-window-size) (length diversities)
end




; diversity linear trend (linear OLS)
to-report diversity-linear-trend
  ; needs to memorize diversity in time
  let reg matrix:regress matrix:from-column-list (list diversities (seq 1 length diversities 1))
  report item 1 (item 0 reg)
end

to-report abs-trend
  report abs diversity-linear-trend
end



; proper print
to show-vocabulary
  let semvals table:make
  
  foreach table:keys semantic-mapping [
    [s]->
     ifelse table:has-key? semvals table:get semantic-mapping s [
         table:put semvals table:get semantic-mapping s (lput first s (table:get semvals (table:get semantic-mapping s)))
       ][
         table:put semvals table:get semantic-mapping s (list first s)
     ]
  ]
  
  foreach table:keys semvals [
    [s]->
    let p (word s " <- ")
    foreach table:get semvals s [set p (word p " - " s)]
    output-print p
  ]
  
end


;;
; distance between vocabularies
to-report vocabulary-distance [speaker1 speaker2]
  let res 0
  foreach semantics [
    [s]->
    set res res + word-distance (one-of (to-agentset [vocabulary] of speaker1) with [semantic = s]) (one-of (to-agentset [vocabulary] of speaker2) with [semantic = s]) ; dirty
  ]
  report res / (length semantics)
end

;;
; report adjacency list with (agent1id,agent2id,distance)
;  if with-links? shall create nw in the fly during computation
;  if distance?, distance measure and not proximity is reported
to-report overall-voc-distances [with-links? distance?]
  if with-links? [ask links [die]]
  let res []
  let speaker-list to-list speakers
  let i 0 repeat (length speaker-list - 1)[
    let j (i + 1)
    repeat (length speaker-list - i - 1)[
      let s1 item i speaker-list let s2 item j speaker-list
      let d vocabulary-distance s1 s2 let w 0
      ifelse distance? [ set w d] [
        set w (1 / ((d ^ 2)+ 1)) ;  what proximity when distance is 0 ? : 1 / 1 + d ^ 2 ; or 1 / (max(d;dmin))2
      ]
      set res lput (list [who] of s1 [who] of s2 w) res
      if with-links? [ask s1 [create-link-with s2 [set link-weight w]]]
      set j j + 1 
    ]
    set i i + 1 
  ]
  report res
end


;;
;
to update-speaker-network-weights
  let speaker-list to-list speakers
  let i 0 repeat (length speaker-list - 1)[
    let j (i + 1)
    repeat (length speaker-list - i - 1)[
      let s1 item i speaker-list let s2 item j speaker-list
      let w (1 / ((((vocabulary-distance s1 s2) + 1)^ 2)))
      ask s1 [ask one-of my-links with [member? s2 both-ends] [set link-weight w set thickness link-weight / 10]]
      set j j + 1
    ]
    set i i + 1 
  ]
end



to-report network-modularity [weight-threshold]
  ; Problem : non-weighted modularity : do thresholded modularity ?
  ask links with [link-weight < weight-threshold] [set hidden? true]
  nw:set-context speakers (links with [link-weight > weight-threshold])
  ; get connex components ; connect them with minimal random link ? ... cuccina...
  let clusters nw:weak-component-clusters
  let communities []
  foreach clusters [
    [c] ->
    if count c > 1 [
      nw:set-context speakers with [member? self c] links with [member? end1 c and member? end2 c and link-weight > weight-threshold]
      foreach nw:louvain-communities [[com] -> set communities lput com communities]
    ]
  ]
  report nw:modularity communities
end





to-report network-modularities [weights]
  let mods []
  foreach weights [
    [w]->
     set mods lput network-modularity w mods
  ]
  report mods
end


to-report max-network-modularity
  ; max of thresholded mod ?
  update-speaker-network-weights
  report max network-modularities seq 0.5 0.99 0.01
end


;;
; implement weighted modularity
to-report network-weighted-modularity
  
end



to dump-voc-network [suffix]
  set experiment-id (word "theta" understanding-threshold "_mu" #-random-mutations "_seed" randomseed)
  ;pathdir:create (word "res/networks/" experiment-id)
  let varname "weight" if weight-as-distances? [set varname "distance"]
  lists-csv-export (overall-voc-distances false weight-as-distances?) (list "a1" "a2" varname) " " (word "res/networks/" experiment-id "_" suffix ".csv");(word "res/vocabulary_nw_" date-and-time ".csv")
end

;to measure-ind-dist
;  foreach to-list speakers
;    let s1 ?
;    let v1 [ask s1 vocabulary] ; speaker 1 vocabulary
;      foreach to-list speakers
;      [let v2 [ask ? vocabulary] ; speaker 2 vocabulary
;        output-print item v1 v2   
;    ]
;  ]
;end
    